
module LaunchDarkly
  #
  # A snapshot of the state of all feature flags with regard to a specific user, generated by
  # calling the client's all_flags_state method.
  #
  class FeatureFlagsState
    def initialize(valid)
      @flag_values = {}
      @flag_metadata = {}
      @valid = valid
    end

    # Used internally to build the state map.
    def add_flag(flag, value, variation)
      key = flag[:key]
      @flag_values[key] = value
      meta = { version: flag[:version], trackEvents: flag[:trackEvents] }
      meta[:variation] = variation if !variation.nil?
      meta[:debugEventsUntilDate] = flag[:debugEventsUntilDate] if flag[:debugEventsUntilDate]
      @flag_metadata[key] = meta
    end

    # Returns true if this object contains a valid snapshot of feature flag state, or false if the
    # state could not be computed (for instance, because the client was offline or there was no user).
    def valid?
      @valid
    end

    # Returns the value of an individual feature flag at the time the state was recorded.
    # Returns nil if the flag returned the default value, or if there was no such flag.
    def flag_value(key)
      @flag_values[key]
    end

    # Returns a map of flag keys to flag values. If a flag would have evaluated to the default value,
    # its value will be nil.
    def values_map
      @flag_values
    end

    # Returns a JSON string representation of the entire state map, in the format used by the
    # LaunchDarkly JavaScript SDK. Use this method if you are passing data to the front end that
    # will be used to "bootstrap" the JavaScript client.
    def json_string
      ret = @flag_values.clone
      ret['$flagsState'] = @flag_metadata
      ret.to_json
    end
  end
end
